<?xml version ="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:property name="camera_length" value="0.01" />
    <xacro:property name="camera_width" value="0.1" />
    <xacro:property name="camera_height" value="0.05" />

    <xacro:property name="lidar_radius" value="0.1" />
    <xacro:property name="lidar_width" value="0.08" />

    <link name="camera_link">
        <visual>
            <geometry>
                <box size="${camera_length} ${camera_width} ${camera_height}"/>
            </geometry>
            <material name="grey" />
        </visual>
        <collision>
            <geometry>
                <box size="${camera_length} ${camera_width} ${camera_height}"/>
            </geometry>
        </collision>
        <xacro:box_inertia m="0.1" l="${camera_length}" 
                            w="${camera_width}" h="${camera_height}" xyz="0 0 0" rpy="0 0 0" />     
    </link>

    <link name="camera_link_optical">
    </link>

    <joint name="base_camera_joint" type="fixed" >
    <parent link="base_link" />
    <child link="camera_link" />
    <origin xyz="${(base_length+camera_length)/2} 0 ${base_height/2}" rpy="0 0 0" />
    </joint>

    <joint name="camera_optical_joint" type="fixed">
        <!-- these values have to be these values otherwise the gazebo camera
            image won't be aligned properly with the frame it is supposedly
            originating from -->
    <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
    <parent link="camera_link"/>
    <child link="camera_link_optical"/>
    </joint>

    <link name="lidar_link">
        <visual>
            <geometry>
                <cylinder radius="${lidar_radius}" length="${lidar_width}"/>
            </geometry>
            <material name="grey" />
        </visual>
        <collision>
            <geometry>
                <cylinder radius="${lidar_radius}" length="${lidar_width}"/>
            </geometry>
        </collision>
        <xacro:cylinder_inertia m="0.1" r="${lidar_radius}" h="${lidar_width}" xyz="0 0 0" rpy="0 0 0" />     
    
    </link>

    <joint name="base_lidar_joint" type="fixed" >
    <parent link="base_link" />
    <child link="lidar_link" />
    <origin xyz="0 0 ${base_height+(lidar_width/2.0)}" rpy="0 0 0" />
    </joint>

    <!-- <gazebo reference="lidar_link">
    <sensor type="ray" name="lidar">
        <always_on>true</always_on>
        <visualize>true</visualize>
        <pose>0.0 0 0.0 0 0 0</pose>
        <update_rate>30</update_rate>
        <ray>
            <scan>
                <horizontal>
                    <samples>360</samples>
                    <resolution>1</resolution>
                    <min_angle>-0.785</min_angle>
                    <max_angle>0.785</max_angle>
                </horizontal>
            </scan>
            <range>
                <min>0.1000</min>
                <max>3.5</max>
                <resolution>0.015</resolution>
            </range>
            <noise>
                <type>gaussian</type>
                <mean>0.0</mean>
                <stddev>0.01</stddev>
            </noise>
        </ray>
        <plugin name="lidar_controller" filename="libgazebo_ros_laser.so">
            <topicName>laser_back/scan</topicName>
            <frame_name>lidar_link</frame_name>
        </plugin>      
    </sensor>
    <material>Gazebo/Purple</material>
    </gazebo> -->

     <!-- <gazebo reference="lidar_link">
    <material>Gazebo/FlatBlack</material>
    <sensor type="ray" name="lds_lfcd_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>5</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1</resolution>
            <min_angle>0.0</min_angle>
            <max_angle>6.28319</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.120</min>
          <max>3.5</max>
          <resolution>0.015</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_lds_lfcd_controller" filename="libgazebo_ros_laser.so">
        <topicName>scan</topicName>
        <frameName>lidar_link</frameName>
      </plugin>
    </sensor>
  </gazebo> -->


<gazebo reference="lidar_link">
    <material>Gazebo/Red</material>
    <sensor name="laser" type="ray">
        <pose>0 0 0 0 0 0 0</pose>
        <visualize>true</visualize>  
        <ray>
          <scan>
            <horizontal>
              <samples>320</samples>
              <resolution>1</resolution>
              <min_angle>0</min_angle>
              <max_angle>6.280000</max_angle>
            </horizontal>
          </scan>
          <range>
            <min>0.25</min>
            <max>3.5</max>
            <resolution>0.015</resolution>
          </range>
          <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
          </noise>
        </ray>
 	    <always_on>true</always_on>
        <update_rate>30</update_rate>   
        <plugin name="laser" filename="/opt/ros/humble/lib/libgazebo_ros_ray_sensor.so">
      	 <ros>
          <argument>~/out:=scan</argument> 
         </ros>
         <frame_name>lidar_link</frame_name>
      <!-- Set output to sensor_msgs/LaserScan to get same output type as gazebo_ros_laser --> 
         <output_type>sensor_msgs/LaserScan</output_type>
        </plugin>
    </sensor>
</gazebo>


    <gazebo reference="camera_link">
            <material>Gazebo/Red</material>
            <sensor name="camera_sensor" type="camera" >
                <pose>0 0 0 0 0 0</pose>
                <visualize>false</visualize>
                <update_rate>10.0</update_rate>
                <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
                    <!-- Set TF frame name. If empty, defaults to link name -->
                    <frame_name>camera_link_optical</frame_name>
                </plugin>
            </sensor>

    </gazebo>

</robot>